name: "Check Pull Request"

on:
  pull_request:
    branches:
      - develop
    paths:
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "rust-toolchain.toml"
      - "rustfmt.toml"
      - ".github/workflows/*.yml"
  push:
    branches:
      - develop

# Ensures only one build is run per branch, unless pushing to develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/develop' && github.run_number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_ARGS: ${{ github.ref == 'refs/heads/develop' && '--release' || '' }}
  CARGO_TERM_COLOR: always
  SKIP_WASM_BUILD: 1

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    container:
      # contains the nightly-toolchain
      image: docker.io/paritytech/ci-unified:bullseye-1.75.0-2024-01-22-v20240109
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
        # some settings are only available in nightly.
      - run: cargo +nightly fmt --all -- --check

  lint:
    name: Clippy
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - run: ./.github/scripts/free_disk_space.sh
      - run: sudo apt-get install -y protobuf-compiler
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-lint-
      - run: cargo clippy --workspace --all-features --all-targets ${{ env.CARGO_ARGS }} -- -D warnings

  Check:
    name: Cargo Zepter
    runs-on: ubuntu-latest

    steps:
      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install Zepter
        run: cargo install --locked -q zepter && zepter --version

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Don't clone historic commits.

      - name: Check features
        run: zepter run check

  test:
    name: Cargo test (all features)
    runs-on: ubuntu-latest
    continue-on-error: false
    strategy:
      matrix:
        runtime:
          - bajun-runtime
    steps:
      - uses: actions/checkout@v4
      - run: ./.github/scripts/free_disk_space.sh
      - run: sudo apt-get install -y protobuf-compiler
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ matrix.runtime }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-test-${{ matrix.runtime }}-
      - run: cargo test --all-features --all-targets ${{ env.CARGO_ARGS }} -p ${{ matrix.runtime }}

  zombienet-tests:
    name: Zombienet tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary: [ bajun-node ]
    env:
      ZOMBIENET_VERSION: v1.3.82
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create testing directories
        run: mkdir -p zombienet-tests/bin

      - name: Setup zombienet binaries
        run: |
          cd zombienet-tests/bin
          wget -q "https://github.com/paritytech/zombienet/releases/download/${{ env.ZOMBIENET_VERSION }}/zombienet-linux-x64"
          chmod +x zombienet-linux-x64
          mv zombienet-linux-x64 zombienet
          ./zombienet setup polkadot -y || :
          ./zombienet version

      - name: Copy network config and tests
        run: cp .maintain/zombienet-* zombienet-tests/

      - name: Build and copy collator binary to zombienet binaries
        run: |
          sudo apt-get install -y protobuf-compiler
          cargo build --release
          cp target/release/${{ matrix.bajun-node }} zombienet-tests/bin/collator

      - name: Run zombienet tests
        run: ./zombienet-tests/bin/zombienet -l "text" -p native test ./zombienet-tests/zombienet-tests.zndsl
