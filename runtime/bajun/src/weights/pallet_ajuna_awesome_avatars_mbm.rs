// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_ajuna_awesome_avatars_mbm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 36.0.0
//! DATE: 2024-04-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-0F6V7QQ`, CPU: `Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("bajun-rococo-local")`, DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-node
// benchmark
// pallet
// --chain=bajun-rococo-local
// --steps=50
// --repeat=20
// --pallet=pallet_ajuna_awesome_avatars_mbm
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-AGPL
// --output=./runtime/bajun/src/weights/pallet_ajuna_awesome_avatars_mbm.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_ajuna_awesome_avatars_mbm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ajuna_awesome_avatars_mbm::WeightInfo for WeightInfo<T> {
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:2 w:1)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::TradeStatsMap` (r:0 w:1)
	/// Proof: `AwesomeAvatars::TradeStatsMap` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	fn player_season_configs_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `156`
		//  Estimated: `6048`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(57_200_000, 0)
			.saturating_add(Weight::from_parts(0, 6048))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `AwesomeAvatars::SeasonStats` (r:2 w:1)
	/// Proof: `AwesomeAvatars::SeasonStats` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::TradeStatsMap` (r:1 w:1)
	/// Proof: `AwesomeAvatars::TradeStatsMap` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	fn season_stats_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `199`
		//  Estimated: `6048`
		// Minimum execution time: 40_200_000 picoseconds.
		Weight::from_parts(46_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6048))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `AwesomeAvatars::Avatars` (r:2 w:1)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(177), added: 2652, mode: `MaxEncodedLen`)
	fn avatar_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `168`
		//  Estimated: `6294`
		// Minimum execution time: 31_400_000 picoseconds.
		Weight::from_parts(32_900_000, 0)
			.saturating_add(Weight::from_parts(0, 6294))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::TradeStatsMap` (r:2 w:1)
	/// Proof: `AwesomeAvatars::TradeStatsMap` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	fn trade_stats_map_cleanup_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `6024`
		// Minimum execution time: 25_900_000 picoseconds.
		Weight::from_parts(32_200_000, 0)
			.saturating_add(Weight::from_parts(0, 6024))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
