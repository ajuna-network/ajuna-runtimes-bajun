// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_nfts`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-0F6V7QQ`, CPU: `Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local")`, DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-node
// benchmark
// pallet
// --chain=local
// --steps=50
// --repeat=20
// --pallet=pallet_nfts
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-AGPL
// --output=./runtime/bajun/src/weights/pallet_nfts.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_nfts`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_nfts::WeightInfo for WeightInfo<T> {
	/// Storage: `Nft::NextCollectionId` (r:1 w:1)
	/// Proof: `Nft::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionRoleOf` (r:0 w:1)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:0 w:1)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionAccount` (r:0 w:1)
	/// Proof: `Nft::CollectionAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `216`
		//  Estimated: `3549`
		// Minimum execution time: 65_899_000 picoseconds.
		Weight::from_parts(69_599_000, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Nft::NextCollectionId` (r:1 w:1)
	/// Proof: `Nft::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionRoleOf` (r:0 w:1)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:0 w:1)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionAccount` (r:0 w:1)
	/// Proof: `Nft::CollectionAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn force_create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3549`
		// Minimum execution time: 36_500_000 picoseconds.
		Weight::from_parts(38_500_000, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemMetadataOf` (r:1 w:0)
	/// Proof: `Nft::ItemMetadataOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:1)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:1001 w:1000)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1000 w:1000)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionMetadataOf` (r:0 w:1)
	/// Proof: `Nft::CollectionMetadataOf` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:0 w:1)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionAccount` (r:0 w:1)
	/// Proof: `Nft::CollectionAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	/// The range of component `c` is `[0, 1000]`.
	/// The range of component `a` is `[0, 1000]`.
	fn destroy(_m: u32, _c: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `62002 + a * (140 ±0)`
		//  Estimated: `2551990 + a * (2757 ±0)`
		// Minimum execution time: 1_230_826_000 picoseconds.
		Weight::from_parts(2_802_821_548, 0)
			.saturating_add(Weight::from_parts(0, 2551990))
			// Standard Error: 117_716
			.saturating_add(Weight::from_parts(7_440_318, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(1004))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(1005))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2757).saturating_mul(a.into()))
	}
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:1)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `455`
		//  Estimated: `3651`
		// Minimum execution time: 64_700_000 picoseconds.
		Weight::from_parts(65_700_000, 0)
			.saturating_add(Weight::from_parts(0, 3651))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:1)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn force_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `455`
		//  Estimated: `3651`
		// Minimum execution time: 62_600_000 picoseconds.
		Weight::from_parts(63_100_000, 0)
			.saturating_add(Weight::from_parts(0, 3651))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `NftTransfer::NftStatuses` (r:1 w:0)
	/// Proof: `NftTransfer::NftStatuses` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:1 w:0)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemMetadataOf` (r:1 w:0)
	/// Proof: `Nft::ItemMetadataOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:1)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemPriceOf` (r:0 w:1)
	/// Proof: `Nft::ItemPriceOf` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemAttributesApprovalsOf` (r:0 w:1)
	/// Proof: `Nft::ItemAttributesApprovalsOf` (`max_values`: None, `max_size`: Some(389), added: 2864, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nft::PendingSwapOf` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `663`
		//  Estimated: `3747`
		// Minimum execution time: 78_300_000 picoseconds.
		Weight::from_parts(78_900_000, 0)
			.saturating_add(Weight::from_parts(0, 3747))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `Nft::Collection` (r:1 w:0)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NftTransfer::NftStatuses` (r:1 w:0)
	/// Proof: `NftTransfer::NftStatuses` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:1 w:0)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:0)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:2)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemPriceOf` (r:0 w:1)
	/// Proof: `Nft::ItemPriceOf` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nft::PendingSwapOf` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `3747`
		// Minimum execution time: 62_600_000 picoseconds.
		Weight::from_parts(63_700_000, 0)
			.saturating_add(Weight::from_parts(0, 3747))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Nft::Collection` (r:1 w:0)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:5000 w:5000)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 5000]`.
	fn redeposit(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711 + i * (137 ±0)`
		//  Estimated: `3549 + i * (2661 ±0)`
		// Minimum execution time: 19_900_000 picoseconds.
		Weight::from_parts(20_200_000, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			// Standard Error: 29_803
			.saturating_add(Weight::from_parts(23_186_192, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2661).saturating_mul(i.into()))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	fn lock_item_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `463`
		//  Estimated: `3541`
		// Minimum execution time: 26_801_000 picoseconds.
		Weight::from_parts(29_301_000, 0)
			.saturating_add(Weight::from_parts(0, 3541))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	fn unlock_item_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `463`
		//  Estimated: `3541`
		// Minimum execution time: 26_701_000 picoseconds.
		Weight::from_parts(27_401_000, 0)
			.saturating_add(Weight::from_parts(0, 3541))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Collection` (r:1 w:0)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:1)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	fn lock_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340`
		//  Estimated: `3549`
		// Minimum execution time: 21_601_000 picoseconds.
		Weight::from_parts(22_901_000, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::OwnershipAcceptance` (r:1 w:1)
	/// Proof: `Nft::OwnershipAcceptance` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionAccount` (r:0 w:2)
	/// Proof: `Nft::CollectionAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn transfer_ownership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562`
		//  Estimated: `3593`
		// Minimum execution time: 34_502_000 picoseconds.
		Weight::from_parts(35_302_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionRoleOf` (r:2 w:4)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn set_team() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `6078`
		// Minimum execution time: 54_102_000 picoseconds.
		Weight::from_parts(55_303_000, 0)
			.saturating_add(Weight::from_parts(0, 6078))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionAccount` (r:0 w:2)
	/// Proof: `Nft::CollectionAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn force_collection_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `311`
		//  Estimated: `3549`
		// Minimum execution time: 22_201_000 picoseconds.
		Weight::from_parts(22_701_000, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Nft::Collection` (r:1 w:0)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:0 w:1)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	fn force_collection_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `276`
		//  Estimated: `3549`
		// Minimum execution time: 18_300_000 picoseconds.
		Weight::from_parts(19_001_000, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	fn lock_item_properties() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `463`
		//  Estimated: `3541`
		// Minimum execution time: 24_801_000 picoseconds.
		Weight::from_parts(25_201_000, 0)
			.saturating_add(Weight::from_parts(0, 3541))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:0)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:1 w:1)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	fn set_attribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567`
		//  Estimated: `3747`
		// Minimum execution time: 65_203_000 picoseconds.
		Weight::from_parts(66_004_000, 0)
			.saturating_add(Weight::from_parts(0, 3747))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:1 w:1)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	fn force_set_attribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `344`
		//  Estimated: `3747`
		// Minimum execution time: 36_302_000 picoseconds.
		Weight::from_parts(36_702_000, 0)
			.saturating_add(Weight::from_parts(0, 3747))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Nft::Attribute` (r:1 w:1)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:0)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn clear_attribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `814`
		//  Estimated: `3747`
		// Minimum execution time: 59_103_000 picoseconds.
		Weight::from_parts(60_003_000, 0)
			.saturating_add(Weight::from_parts(0, 3747))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Nft::Item` (r:1 w:0)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemAttributesApprovalsOf` (r:1 w:1)
	/// Proof: `Nft::ItemAttributesApprovalsOf` (`max_values`: None, `max_size`: Some(389), added: 2864, mode: `MaxEncodedLen`)
	fn approve_item_attributes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410`
		//  Estimated: `3854`
		// Minimum execution time: 24_301_000 picoseconds.
		Weight::from_parts(24_801_000, 0)
			.saturating_add(Weight::from_parts(0, 3854))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Item` (r:1 w:0)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemAttributesApprovalsOf` (r:1 w:1)
	/// Proof: `Nft::ItemAttributesApprovalsOf` (`max_values`: None, `max_size`: Some(389), added: 2864, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:1001 w:1000)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1000]`.
	fn cancel_item_attributes_approval(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `923 + n * (172 ±0)`
		//  Estimated: `3854 + n * (2757 ±0)`
		// Minimum execution time: 37_902_000 picoseconds.
		Weight::from_parts(38_102_000, 0)
			.saturating_add(Weight::from_parts(0, 3854))
			// Standard Error: 18_112
			.saturating_add(Weight::from_parts(7_055_460, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2757).saturating_mul(n.into()))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:0)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemMetadataOf` (r:1 w:1)
	/// Proof: `Nft::ItemMetadataOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn set_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567`
		//  Estimated: `3712`
		// Minimum execution time: 50_099_000 picoseconds.
		Weight::from_parts(50_599_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemMetadataOf` (r:1 w:1)
	/// Proof: `Nft::ItemMetadataOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:0)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	fn clear_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778`
		//  Estimated: `3712`
		// Minimum execution time: 49_199_000 picoseconds.
		Weight::from_parts(49_799_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionMetadataOf` (r:1 w:1)
	/// Proof: `Nft::CollectionMetadataOf` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	fn set_collection_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `398`
		//  Estimated: `3631`
		// Minimum execution time: 46_299_000 picoseconds.
		Weight::from_parts(47_099_000, 0)
			.saturating_add(Weight::from_parts(0, 3631))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:0)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionMetadataOf` (r:1 w:1)
	/// Proof: `Nft::CollectionMetadataOf` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	fn clear_collection_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `588`
		//  Estimated: `3631`
		// Minimum execution time: 44_700_000 picoseconds.
		Weight::from_parts(45_299_000, 0)
			.saturating_add(Weight::from_parts(0, 3631))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	fn approve_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `439`
		//  Estimated: `3651`
		// Minimum execution time: 26_599_000 picoseconds.
		Weight::from_parts(26_999_000, 0)
			.saturating_add(Weight::from_parts(0, 3651))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	fn cancel_approval() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `447`
		//  Estimated: `3651`
		// Minimum execution time: 23_599_000 picoseconds.
		Weight::from_parts(23_999_000, 0)
			.saturating_add(Weight::from_parts(0, 3651))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	fn clear_all_transfer_approvals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `447`
		//  Estimated: `3651`
		// Minimum execution time: 22_400_000 picoseconds.
		Weight::from_parts(22_800_000, 0)
			.saturating_add(Weight::from_parts(0, 3651))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::OwnershipAcceptance` (r:1 w:1)
	/// Proof: `Nft::OwnershipAcceptance` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn set_accept_ownership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3517`
		// Minimum execution time: 19_600_000 picoseconds.
		Weight::from_parts(19_999_000, 0)
			.saturating_add(Weight::from_parts(0, 3517))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:1)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:0)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn set_collection_max_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340`
		//  Estimated: `3549`
		// Minimum execution time: 23_200_000 picoseconds.
		Weight::from_parts(23_599_000, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:1)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	fn update_mint_settings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `323`
		//  Estimated: `3538`
		// Minimum execution time: 22_399_000 picoseconds.
		Weight::from_parts(22_900_000, 0)
			.saturating_add(Weight::from_parts(0, 3538))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Item` (r:1 w:0)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:0)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemPriceOf` (r:0 w:1)
	/// Proof: `Nft::ItemPriceOf` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	fn set_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `575`
		//  Estimated: `3651`
		// Minimum execution time: 30_599_000 picoseconds.
		Weight::from_parts(32_499_000, 0)
			.saturating_add(Weight::from_parts(0, 3651))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemPriceOf` (r:1 w:1)
	/// Proof: `Nft::ItemPriceOf` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:0)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NftTransfer::NftStatuses` (r:1 w:0)
	/// Proof: `NftTransfer::NftStatuses` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:1 w:0)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:0)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:2)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nft::PendingSwapOf` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	fn buy_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833`
		//  Estimated: `3747`
		// Minimum execution time: 73_599_000 picoseconds.
		Weight::from_parts(74_299_000, 0)
			.saturating_add(Weight::from_parts(0, 3747))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// The range of component `n` is `[0, 1]`.
	fn pay_tips(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_600_000 picoseconds.
		Weight::from_parts(3_982_802, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 23_418
			.saturating_add(Weight::from_parts(4_957_097, 0).saturating_mul(n.into()))
	}
	/// Storage: `Nft::Item` (r:2 w:0)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nft::PendingSwapOf` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	fn create_swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552`
		//  Estimated: `6312`
		// Minimum execution time: 28_600_000 picoseconds.
		Weight::from_parts(29_300_000, 0)
			.saturating_add(Weight::from_parts(0, 6312))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::PendingSwapOf` (r:1 w:1)
	/// Proof: `Nft::PendingSwapOf` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:1 w:0)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	fn cancel_swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `600`
		//  Estimated: `3651`
		// Minimum execution time: 27_200_000 picoseconds.
		Weight::from_parts(28_800_000, 0)
			.saturating_add(Weight::from_parts(0, 3651))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::Item` (r:2 w:2)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingSwapOf` (r:1 w:2)
	/// Proof: `Nft::PendingSwapOf` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:0)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `NftTransfer::NftStatuses` (r:2 w:0)
	/// Proof: `NftTransfer::NftStatuses` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:2 w:0)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:2 w:0)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:4)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemPriceOf` (r:0 w:2)
	/// Proof: `Nft::ItemPriceOf` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	fn claim_swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1051`
		//  Estimated: `6504`
		// Minimum execution time: 125_198_000 picoseconds.
		Weight::from_parts(126_498_000, 0)
			.saturating_add(Weight::from_parts(0, 6504))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `Nft::CollectionRoleOf` (r:2 w:0)
	/// Proof: `Nft::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:10 w:10)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemMetadataOf` (r:1 w:1)
	/// Proof: `Nft::ItemMetadataOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:1)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 10]`.
	fn mint_pre_signed(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `629`
		//  Estimated: `6078 + n * (2757 ±0)`
		// Minimum execution time: 148_197_000 picoseconds.
		Weight::from_parts(161_023_024, 0)
			.saturating_add(Weight::from_parts(0, 6078))
			// Standard Error: 149_352
			.saturating_add(Weight::from_parts(39_553_310, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2757).saturating_mul(n.into()))
	}
	/// Storage: `Nft::Item` (r:1 w:0)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemAttributesApprovalsOf` (r:1 w:1)
	/// Proof: `Nft::ItemAttributesApprovalsOf` (`max_values`: None, `max_size`: Some(389), added: 2864, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:10 w:10)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 10]`.
	fn set_attributes_pre_signed(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688`
		//  Estimated: `3854 + n * (2757 ±0)`
		// Minimum execution time: 73_200_000 picoseconds.
		Weight::from_parts(93_320_355, 0)
			.saturating_add(Weight::from_parts(0, 3854))
			// Standard Error: 131_619
			.saturating_add(Weight::from_parts(38_489_362, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2757).saturating_mul(n.into()))
	}
}
